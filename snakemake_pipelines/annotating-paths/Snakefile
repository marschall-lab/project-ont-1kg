"""
Annotating the GFA with haplotype and reference path information
"""
configfile: './config.yaml'

chromosomes = ['chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10','chr11','chr12','chr13','chr14','chr15','chr16','chr17','chr18','chr19','chr20','chr21','chr22','chrX','chrY','chrM']

# Global Wildcard Constraints
wildcard_constraints:
    sample='(?:NA|HG)(?:\d{5}|\d{3})',
    chr='chr[0-9A-Z]',
    haplotype='(1)|(2)'

#################
##### Rules #####
#################

rule all:
    input:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518_tagged_withseq.gfa',
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.gaf', sample=config['samples'], haplotype=config['haplotypes']),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/stats/{sample}_{haplotype}_{graph}.png', sample=config['samples'], haplotype=config['haplotypes'], graph=['dv', 'mapq', 'num_align', 'num_res_match', 'p_align']),
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/stats/text_stats.txt',
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.sorted.gaf', sample=config['samples'], haplotype=config['haplotypes']),
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.vcf.gz',
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518_filtered.vcf.gz',
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.check'

################################################
##### Aligning the Assemblies to the Graph #####
################################################

rule align_assemblies_to_chm13_minigraph:
    input:
        ref='/gpfs/project/projects/medbioinf/users/spani/files/gfa/1000GP/chm13-90c.r518.gfa',
        assembly='/gpfs/project/projects/medbioinf/users/spani/files/fasta/HPRC/Assemblies_Yr1/{sample}.{haplotype}.fa',
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.gaf'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/log/assembly_mappings/{sample}.{haplotype}.log'
    resources:
        runtime_hrs=12,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 80000 * attempt
    threads: 24
    shell:
        '/gpfs/project/projects/medbioinf/users/spani/packages/minigraph/minigraph --vc -cx lr {input.ref} {input.assembly} -t {threads} > {output}'


rule bubble_calling_minigraph:
    input:
        ref='/gpfs/project/projects/medbioinf/users/spani/files/gfa/1000GP/chm13-90c.r518.gfa',
        assembly='/gpfs/project/projects/medbioinf/users/spani/files/fasta/HPRC/Assemblies_Yr1/{sample}.{haplotype}.fa',
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/minigraph_bubble_calls/{sample}.{haplotype}.bed'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/log/minigraph_bubble_calls/{sample}.{haplotype}.log'
    resources:
        runtime_hrs=10,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 50000 * attempt
    shell:
        '/gpfs/project/projects/medbioinf/users/spani/packages/minigraph/minigraph -cxasm --call {input.ref} {input.assembly} > {output}'


rule make_assembly_mapping_list:
    input:
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.gaf', sample=config['samples'], haplotype=config['haplotypes'])
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/pathlist.txt'
    resources:
        runtime_hrs=0,
        runtime_min=10,
        mem_total_mb=lambda wildcards, attempt: 2048 * attempt,
        mem_per_cpu_mb=lambda wildcards, attempt: 2048 * attempt
    run:
        f = open(output[0], 'w')
        for name in input:
            print(name, file=f)
        f.close()    


rule get_alignment_stats:
    input:
        assembly_list='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/pathlist.txt',
        script='/gpfs/project/projects/medbioinf/users/spani/scripts/1000g-ont/ont-1kg/snakemake_pipelines/annotating-paths/scripts/alignment_stats.py'
    output:
        pics=expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/stats/{sample}_{haplotype}_{graph}.png', sample=config['samples'], haplotype=config['haplotypes'], graph=['dv', 'mapq', 'num_align', 'num_res_match', 'p_align']),
        txt='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/stats/text_stats.txt'
    params:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/stats/'
    conda:
        'envs/basic.yaml'
    resources:
        runtime_hrs=0,
        runtime_min=30,
        mem_total_mb=lambda wildcards, attempt: 20*1024 * attempt
    shell:
        'python {input.script} --assembly-list {input.assembly_list} --output {params} > {output.txt}'


############################################
##### Pre-processing GFA and GAF files #####
############################################

# conda environment should have networkx and whatshap. In this version, the tagged GFA does not have sequence info.
rule call_rGFA_bubbles:
    input:
        ref='/gpfs/project/projects/medbioinf/users/spani/files/gfa/1000GP/chm13-90c.r518.gfa',
        script='/gpfs/project/projects/medbioinf/users/spani/scripts/1000g-ont/ont-1kg/order_gfa.py'
    output:
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518-{chr}.gfa', chr=chromosomes),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518-{chr}.csv', chr=chromosomes)
    params:
        out_dir='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging'
    conda:
        'envs/preprocessing.yaml'
    resources:
        runtime_hrs=0,
        runtime_min=30,
        mem_total_mb=lambda wildcards, attempt: 10*1024 * attempt
    shell:
        '''
        python {input.script} --with-sequence --outdir {params.out_dir} {input.ref}
        '''

#Concat the chromsome-wise tagged GFA produced
rule concat_tagged_GFA:
    input:
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518-{chr}.gfa', chr=chromosomes)
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518_tagged_withseq.gfa'
    shell:
        'cat {input} > {output}'

# Sorting GAF generated from Assembly Alignment
rule sort_GAF:
    input:
        gfa='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518_tagged_withseq.gfa',
        gaf='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.gaf',
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/{sample}.{haplotype}.sorted.gaf'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/log/assembly_mappings/{sample}.{haplotype}.sorted.log'
    conda:
        'envs/basic.yaml'
    resources:
        runtime_hrs=1,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 2048 * attempt
    shell:
        '''
        set +u
        source ~/.bashrc
        conda activate gaftools-dev
        set -u
        gaftools sort --bgzip --outgaf {output} {input.gaf} {input.gfa} 2> {log}
        '''
    

##################################
##### Producing the VCF file #####
##################################

rule assemblies_to_vcf:
    input:
        gfa='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/bubble_calling_and_tagging/chm13-90c.r518_tagged_withseq.gfa',
        assembly_list='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/assembly_mappings/pathlist.txt',
        script='/gpfs/project/projects/medbioinf/users/spani/scripts/1000g-ont/ont-1kg/snakemake_pipelines/annotating-paths/scripts/assembly-to-vcf.py'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.vcf.gz'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/log/vcf/chm13-90c.r518.log'
    conda:
        'envs/basic.yaml'
    resources:
        runtime_hrs=1,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 10*1024 * attempt
    shell:
        '''
        python {input.script} --gfa {input.gfa} --assembly-list {input.assembly_list} --bgzip --output {output} 2> {log}
        bcftools index {output}
        '''

# Filter out the NS80 tagged records
rule filtered_vcf:
    input:
        vcf='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.vcf.gz',
        check='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.check'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518_filtered.vcf.gz'
    conda:
        'envs/basic.yaml'
    resources:
        runtime_hrs=1,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 2*1024 * attempt
    shell:
        '''
        bcftools view -f "PASS" -Oz -o {output} {input}
        bcftools index {output}
        '''

# check correctness of vcfs
rule vcf_correctness:
    input:
        vcf='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.vcf.gz',
        ref='/gpfs/project/projects/medbioinf/users/spani/files/fasta/HPRC/reference/chm13v2.0_maskedY_rCRS.fa.gz'
    output:
        out1='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.check'
    log:
        log1='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/annotating-paths/vcf/chm13-90c.r518.check.log'
    conda:
        'envs/basic.yaml'
    shell:
        'bcftools norm --check-ref e -f {input.ref} {input.vcf} > /dev/null 2> {log.log1} && touch {output.out1}'