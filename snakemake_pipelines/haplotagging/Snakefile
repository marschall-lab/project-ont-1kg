"""
Haplotagging all the reads in the CRAM files against the Phased NYGC VCFs.
"""
configfile: './config.yaml'

import subprocess
import re
import gzip
import pandas as pd

#Finding sample list used for 1000GP project by us
path='/gpfs/project/projects/medbioinf/data/share/globus/1000g-ont/GRCh38/'
ls_command = 'ls '+path
process = subprocess.Popen(ls_command.split(), stdout=subprocess.PIPE)
ls_out, ls_err = process.communicate()
sample_re = re.compile('(?:NA|HG)\d{5}')

cram_sample_list = [s for s in ls_out.decode('utf-8').split('\n') if sample_re.match(s)]

vcf_sample_list = None
with gzip.open("/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz", "rt") as f:
    for line in f:
        if line[0:2] == "##":
            continue
        vcf_sample_list = line.rstrip().split("\t")[9:]
        break

common_samples = list(set(cram_sample_list).intersection(vcf_sample_list))

master_list = "/gpfs/project/projects/medbioinf/users/spani/results/1000GP/1k_ont_data_overview-samples_and_sequencing.tsv"
df = pd.read_csv(master_list, sep="\t")
df = df[["SAMPLE","SEX"]].to_numpy()
female_samples = []
male_samples = []
for sample,sex in df:
    if sex == "Female":
        female_samples.append(sample)
    if sex == "Male":
        male_samples.append(sample)
    else:
        raise RuntimeError("Sample %s not designated as 'Male' or 'Female'"(sample))

female_samples = list(set(common_samples).intersection(female_samples))
male_samples = list(set(common_samples).intersection(male_samples))

hgsvc_hprc_common_samples = ['HG01258', 'NA12878', 'NA18989', 'NA19129', 'NA19238', 'NA19331', 'NA20847', 'HG00731', 'HG00513', 'HG00171', 'HG03009', 'HG00096', 'HG01596', 'HG00268', 'HG02554', 'HG02953', 'HG01890', 'NA19347']

sample_list = female_samples

wildcard_constraints:
    sample='(?:NA|HG)\d{5}',
    chr="chr[0-9A-Z]"

#############################
##### Rule Definitions: #####
#############################

rule all:
    input:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz',
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz', sample=sample_list),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz.csi', sample=sample_list),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}_read_tags.tsv', sample=sample_list),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}.cram', sample=sample_list),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}.cram.crai', sample=sample_list)
        

############################
##### Merge NYGC VCFs ######
############################

rule create_region_vcf_file_list:
    input:
        vcfs=expand("/gpfs/project/projects/medbioinf/users/spani/files/vcf/1000GP/NYGC/phased/1kGP_high_coverage_Illumina.{chr}.filtered.SNV_INDEL_SV_phased_panel.vcf.gz", chr=config['chromosome'])
    output:
        temp('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-vcf-list.txt')
    run:
        f = open(output[0], 'w')
        for name in input.vcfs:
            print(name, file=f)
        f.close()

rule concat_nygc_vcf:
    input:
        file_list='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-vcf-list.txt'
    output:
        vcf='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz',
        ind='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz.csi'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.log'
    conda:
        'envs/preprocessing.yaml'
    resources:
        runtime_hrs=5,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 2048 * attempt
    shell:
        '''
        bcftools concat -o {output.vcf} -Oz -f {input.file_list} &> {log}
        bcftools index {output.vcf}
        '''

########################################
##### Split Phased VCF Sample-wise #####
########################################

rule split_phased_vcf:
    input:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz'
    conda:
        'envs/preprocessing.yaml'
    resources:
        runtime_hrs=8,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 512 * attempt
    shell:
        '''
        bcftools view -Oz -s {wildcards.sample} -o {output} {input}
        '''

rule index_phased_vcf:
    input:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz.csi'
    conda:
        'envs/preprocessing.yaml'
    resources:
        runtime_hrs=0,
        runtime_min=20,
        mem_total_mb=lambda wildcards, attempt: 256 * attempt
    shell:
        '''
        bcftools index {input}
        '''

##############################
##### Haplotagging Reads #####
##############################

# For now, the output BAM file is being sent to /dev/null. Change it for later.
rule haplotag:
    input:
        reads='/gpfs/project/projects/medbioinf/data/share/globus/1000g-ont/GRCh38/{sample}/alignments/{sample}.cram',
        vcf='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz',
        vcf_ind='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/temp/{sample}.vcf.gz.csi',
        ref='/gpfs/project/projects/medbioinf/users/spani/files/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set_maskedGRC_exclusions_v2.fasta'
    output:
        tagged_cram='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}.cram',
        haplotag_list='/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}_read_tags.tsv'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/whatshap/{sample}/output.log'
    conda:
        'envs/whatshap.yaml'
    resources:
        runtime_hrs=lambda wildcards, attempt: 4 * attempt,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 40000 * attempt
    shell:
        '''
        seq_cache_populate.pl -root /gpfs/project/projects/medbioinf/users/spani/files/ref /gpfs/project/projects/medbioinf/users/spani/files/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set_maskedGRC_exclusions_v2.fasta
        export REF_PATH=/gpfs/project/projects/medbioinf/users/spani/files/ref/%2s/%2s/%s:http://www.ebi.ac.uk/ena/cram/md5/%s
        export REF_CACHE=/gpfs/project/projects/medbioinf/users/spani/files/ref/%2s/%2s/%s
        whatshap haplotag --reference {input.ref} --sample {wildcards.sample} --skip-missing-contigs --output-haplotag-list {output.haplotag_list} --output {output.tagged_cram} {input.vcf} {input.reads}
        '''

rule index_haplotagged_cram:
    input:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}.cram'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/GRCh38/{sample}/{sample}.cram.crai'
    conda:
        'envs/whatshap.yaml'
    resources:
        runtime_hrs=lambda wildcards, attempt: 1 * attempt,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 512 * attempt
    shell:
        '''
        samtools index -o {output} {input}
        '''




