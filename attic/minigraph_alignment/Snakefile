"""
Minigraph alignments and post-processing GAFs
"""

import subprocess
import re
import gzip
import pandas as pd

#Finding sample list used for 1000GP project by us
path='/gpfs/project/projects/medbioinf/data/share/globus/hhu-1000g-ont/fasta/'
ls_command = 'ls '+path
process = subprocess.Popen(ls_command.split(), stdout=subprocess.PIPE)
ls_out, ls_err = process.communicate()

fasta_samples = set()
fasta_files = {}
for f in ls_out.decode('utf-8').split('\n'):
    if f[-2:] != "gz":
        continue
    fasta_samples.add(f[0:7])
    try:
        fasta_files[f[0:7]].append(f)
    except:
        fasta_files[f[0:7]] = [f]

vcf_sample_list = None
with gzip.open("/gpfs/project/projects/medbioinf/users/spani/results/1000GP/haplotagging-results/nygc-merged.vcf.gz", "rt") as f:
    for line in f:
        if line[0:2] == "##":
            continue
        vcf_sample_list = line.rstrip().split("\t")[9:]
        break

common_samples = list(fasta_samples.intersection(vcf_sample_list))

samples = ['HG00096', 'HG00171']

wildcard_constraints:
    sample='(?:NA|HG)\d{5}',


rule all:
    input:
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}_merged.fasta.gz', sample=samples),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.gaf', sample=samples),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.gaf', sample=samples),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.sorted.gaf.gz', sample=samples),
        expand('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.sorted.gaf.gz.gai', sample=samples)


# Merge FASTA files
rule merge_fasta:
    input:
        lambda wildcards: ['/gpfs/project/projects/medbioinf/data/share/globus/hhu-1000g-ont/fasta/{}'.format(fname) for fname in fasta_files[wildcards.sample]]
    output:
        fasta = temp('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}_merged.fasta.gz')
    conda:
        'envs/basic.yaml'
    resources:
        runtime_hrs=12,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 5120 * attempt
    shell:
        'cat {input} | gzip -d | bgzip -c > {output.fasta}'

# Run minigraph alignment
rule minigraph_alignment:
    input:
        fasta = '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}_merged.fasta.gz',
        ref = '/gpfs/project/projects/medbioinf/users/spani/files/gfa/1000GP/chm13-90c.r518_tagged.gfa'
    output:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.gaf'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/minigraph_alignment.log'
    resources:
        runtime_hrs=24,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 30000 * attempt
    threads: 32
    shell:
        '/gpfs/project/projects/medbioinf/users/spani/packages/minigraph/minigraph --vc -cx lr {input.ref} {input.fasta} -t {threads} > {output}'


# Adding haplotags to GAF
rule gaftools_phase:
    input:
        gaf = '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.gaf',
        read_tag = '/gpfs/project/projects/medbioinf/data/share/globus/hhu-1000g-ont/read_tags/{sample}/{sample}_read_tags.tsv'
    output:
        temp('/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.gaf')
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/gaftools_phase.log'
    resources:
        runtime_hrs=1,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 5000 * attempt
    shell:
        '''
        set +u
        source ~/.bashrc
        conda activate gaftools-dev
        set -u
        gaftools phase -o {output} {input.gaf} {input.read_tag}
        '''

# Sorting GAF
rule gaftools_sort:
    input:
        gaf = '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.gaf',
        gfa = '/gpfs/project/projects/medbioinf/users/spani/files/gfa/1000GP/chm13-90c.r518_tagged.gfa'
    output:
        sorted_gaf = '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.sorted.gaf.gz',
        index = '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/{sample}.tagged.sorted.gaf.gz.gai'
    log:
        '/gpfs/project/projects/medbioinf/users/spani/results/1000GP/minigraph-alignments/chm13-90c.r518/{sample}/gaftools_sort.log'
    resources:
        runtime_hrs=1,
        runtime_min=0,
        mem_total_mb=lambda wildcards, attempt: 5000 * attempt
    shell:
        '''
        set +u
        source ~/.bashrc
        conda activate gaftools-dev
        set -u
        gaftools sort --bgzip --outgaf {output.sorted_gaf} {input.gaf} {input.gfa}
        '''
